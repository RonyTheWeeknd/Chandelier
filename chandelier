//+------------------------------------------------------------------+
//|                                      ChandelierExit_v2_fixed.mq5 |
//|                             Copyright 2023, Your Name or Company |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "Your Name or Company Name"
#property link      "https://www.mql5.com"
#property version   "1.00"
#property indicator_chart_window
#property indicator_plots 2
#property indicator_label1 "Long Stop"
#property indicator_type1 DRAW_LINE
#property indicator_color1 clrGreen
#property indicator_style1 STYLE_SOLID
#property indicator_width1 2
#property indicator_label2 "Short Stop"
#property indicator_type2 DRAW_LINE
#property indicator_color2 clrRed
#property indicator_style2 STYLE_SOLID
#property indicator_width2 2

input int ATR_Period = 22;
input double ATR_Multiplier = 3.0;
input bool Show_Buy_Sell_Labels = true;
input bool Enable_Alerts = true;

double longStopBuffer[];
double shortStopBuffer[];

//+------------------------------------------------------------------+
//| Custom indicator initialization function                         |
//+------------------------------------------------------------------+
int OnInit()
{
   SetIndexBuffer(0, longStopBuffer);
   SetIndexBuffer(1, shortStopBuffer);

   IndicatorSetString(INDICATOR_SHORTNAME, "Chandelier Exit v2");
   SetIndexLabel(0, "Long Stop");
   SetIndexLabel(1, "Short Stop");

   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Custom indicator iteration function                              |
//+------------------------------------------------------------------+
int OnCalculate(const int rates_total, const int prev_calculated, const datetime &time[], const double &open[],
                const double &high[], const double &low[], const double &close[], const long &tick_volume[],
                const long &volume[], const int &spread[])
{
   int start = prev_calculated;
   if (start > 0) start--;

   ArraySetAsSeries(longStopBuffer, true);
   ArraySetAsSeries(shortStopBuffer, true);
   ArraySetAsSeries(time, true);

   for (int i = start; i < rates_total; i++)
   {
      double atr = ATR_Multiplier * iATR(_Symbol, 0, ATR_Period, i);
      longStopBuffer[i] = iHighest(_Symbol, 0, MODE_HIGH, ATR_Period, i) - atr;
      shortStopBuffer[i] = iLowest(_Symbol, 0, MODE_LOW, ATR_Period, i) + atr;
   }

   if (Show_Buy_Sell_Labels)
   {
      for (int i = 1; i < rates_total; i++)
      {
         if (close[i] > shortStopBuffer[i] && close[i - 1] <= shortStopBuffer[i - 1])
         {
            if (Enable_Alerts) Alert("Chandelier Exit Buy Signal at bar ", i);
            ObjectCreate(0, "LongArrow" + IntegerToString(i), OBJ_ARROW, 0, time[i], low[i] - (atr * 0.5));
            ObjectSetInteger(0, "LongArrow" + IntegerToString(i), OBJPROP_ARROWCODE, SYMBOL_ARROWUP);
            ObjectSetInteger(0, "LongArrow" + IntegerToString(i), OBJPROP_COLOR, clrGreen);
         }

         if (close[i] < longStopBuffer[i] &&close[i - 1] >= longStopBuffer[i - 1]) { if (Enable_Alerts) Alert("Chandelier Exit Sell Signal at bar ", i); ObjectCreate(0, "ShortArrow" + IntegerToString(i), OBJ_ARROW, 0, time[i], high[i] + (atr * 0.5)); ObjectSetInteger(0, "ShortArrow" + IntegerToString(i), OBJPROP_ARROWCODE, SYMBOL_ARROWDOWN); ObjectSetInteger(0, "ShortArrow" + IntegerToString(i), OBJPROP_COLOR, clrRed); } } }

return(rates_total); } //+------------------------------------------------------------------+
